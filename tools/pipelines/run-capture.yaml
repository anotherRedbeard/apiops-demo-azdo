parameters:

  - name: OUTPUT_FOLDER_PATH 
    displayName: Output Folder Path
    type: string
    default: devportal-artifacts
  - name: APIM_REPOSITORY_NAME
    type: string
    displayName: APIM repository for pull request
    default: apiops-demo-azdo
  - name: TARGET_BRANCH_NAME
    type: string
    displayName: Target branch for pull request
    default: main

pr: none

trigger: none

variables:
  - group: apim-automation
  - name: System.Debug
    value: true

stages:
  - stage: create_artifact_from_dev_portal
    displayName: Create artifact from dev portal
    jobs:
      - job: create_artifact_from_dev_portal
        displayName: Create artifact from dev portal
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self

          - task: UseNode@1
            inputs:
              version: '18.x'
              checkLatest: true

          - script: |
              npm install
              node ./scripts.v3/capture --subscriptionId "$(AZURE_SUBSCRIPTION_ID)" --resourceGroupName "$(RESOURCE_GROUP_NAME)" --serviceName "$(APIM_NAME)" --tenantId "$(AZURE_TENANT_ID)" --servicePrincipal "$(AZURE_CLIENT_ID)"  --servicePrincipalSecret "$(AZURE_CLIENT_SECRET)"  --folder "$(System.DefaultWorkingDirectory)/${{ parameters.OUTPUT_FOLDER_PATH }}/snapshot"
            displayName: 'Run Capture'
            env:
              AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
              AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              AZURE_TENANT_ID: $(AZURE_TENANT_ID)
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              RESOURCE_GROUP_NAME: $(RESOURCE_GROUP_NAME)
              APIM_NAME: $(APIM_NAME)

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/${{ parameters.OUTPUT_FOLDER_PATH }}'
              artifact: 'artifacts-from-capture'

  # github create PR, you will need to create a GITHUB_OWNER and GITHUB_PAT variable in the pipeline to connect to repo            
  - stage: create_template_branch
    displayName: Create template branch
    jobs:
      - job: create_artifacts_pull_request
        displayName: Create artifacts pull request
        pool:
          vmImage: windows-latest
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download pipeline artifact
            inputs:
              source: current
              artifactName: artifacts-from-capture
              targetPath: $(Pipeline.Workspace)/${{ parameters.OUTPUT_FOLDER_PATH }}
          - task: PowerShell@2
            displayName: Create pull request
            inputs:
              targetType: "inline"
              script: |
                Set-StrictMode -Version Latest
                $ErrorActionPreference = "Stop"
                $VerbosePreference = "Continue"
                $InformationPreference = "Continue"

                # GitHub repository and token details
                $githubRepoOwner = "$(GITHUB_OWNER)"
                $githubRepoName = "${{ parameters.APIM_REPOSITORY_NAME }}"
                $githubToken = "$(GITHUB_PAT)"

                # The source and target branches for the pull request
                $sourceBranch = "${{ parameters.TARGET_BRANCH_NAME }}"
                $targetBranch = "artifacts-from-capture-build-$(Build.BuildId)"

                Write-Information "Creating temporary folder..."
                $temporaryFolderPath = Join-Path "$(Agent.TempDirectory)" "artifacts-from-capture"
                New-Item -Path "$temporaryFolderPath" -ItemType "Directory"

                Write-Information "Cloning branch $sourceBranch in repository $githubRepoName..."
                $cloneUrlWithCreds = "https://oauth2:$githubToken@github.com/$githubRepoOwner/$githubRepoName.git"

                Write-Information "Clone URL is $cloneUrlWithCreds"
                git clone --branch "$sourceBranch" --depth 1 "$cloneUrlWithCreds" "$temporaryFolderPath"
                if ($LASTEXITCODE -ne 0) { throw "Cloning branch $sourceBranch in repository $githubRepoName failed." }

                Write-Information "Creating temporary branch from $sourceBranch..."
                git -C "$temporaryFolderPath" checkout -b "$targetBranch" "$sourceBranch"
                if ($LASTEXITCODE -ne 0) { throw "Creating temporary branch $sourceBranch failed." }

                Write-Information "Creating artifacts folder..."
                $artifactFolderPath = Join-Path "$temporaryFolderPath" "${{ parameters.OUTPUT_FOLDER_PATH }}"
                if ((Test-Path -Path "$artifactFolderPath") -eq $false) {
                    New-Item -Path "$artifactFolderPath" -ItemType "Directory"
                }

                Write-Information "Synchronizing artifacts..."
                Get-ChildItem -Path (Join-Path "$(Pipeline.Workspace)" -childPath "${{ parameters.OUTPUT_FOLDER_PATH }}") -Recurse
                $extractorArtifactsFolderPath = Join-Path "$(Pipeline.Workspace)" ${{ parameters.OUTPUT_FOLDER_PATH }}
                if ("$(Agent.OS)" -like "*win*") {
                    & robocopy "$extractorArtifactsFolderPath" "$artifactFolderPath" /zb /mir /mt
                    if ($LASTEXITCODE -gt 7) { throw "Setting $artifactFolderPath to contents of $extractorArtifactsFolderPath failed." }
                }
                else {
                    & rsync --verbose --archive --delete --force --recursive "$extractorArtifactsFolderPath/" "$artifactFolderPath/"
                    if ($LASTEXITCODE -ne 0) { throw "Setting $artifactFolderPath to contents of $extractorArtifactsFolderPath failed." }
                }

                Write-Information "Validating that changes exist to be published..."
                $gitStatus = git -C "$temporaryFolderPath" status --porcelain
                if ($LASTEXITCODE -ne 0) { throw "Getting git status failed." }
                if ([string]::IsNullOrWhiteSpace($gitStatus)) {
                    Write-Information "No changes exist to be published."
                    return
                }

                Write-Information "Setting git user information..."
                git config --global user.email "github-actions@example.com"
                git config --global user.name "GitHub Actions"

                Write-Information "Adding changes..."
                git -C "$temporaryFolderPath" add --all
                if ($LASTEXITCODE -ne 0) { throw "Adding Git changes failed." }

                Write-Information "Committing changes"
                $commitOutput = git -C "$temporaryFolderPath" commit --message "Initial commit"
                if ($LASTEXITCODE -ne 0) { 
                  if ($commitOutput.Contains("nothing to commit, working tree clean")) {
                    Write-Information "No changes exist to be published."
                    return
                  }
                  throw "Committing Git changes failed." 
                }

                Write-Information "Pushing changes"
                git -C "$temporaryFolderPath" push --set-upstream origin "$targetBranch"

                if ($LASTEXITCODE -ne 0) { throw "Pushing Git changes failed." }

                Write-Information "Creating pull request..."
                # Create a pull request using GitHub API
                $prData = @{
                    title = "Merging artifacts from portal (Build $(Build.BuildId))"
                    head = $targetBranch
                    base = $sourceBranch
                }
                $prDataJson = $prData | ConvertTo-Json
                $headers = @{
                    "Accept" = "application/vnd.github+json"
                    "Authorization" = "Bearer $githubToken"
                    "Content-Type" = "application/json"
                }
                $uri = "https://api.github.com/repos/$githubRepoOwner/$githubRepoName/pulls"
                $response = Invoke-WebRequest -Uri $uri -Method Post -Headers $headers -Body $prDataJson
                if ($response.StatusCode -ne "201") { throw "Creating pull request failed." }

                Write-Information "Deleting temporary folder contents..."
                Remove-Item -Path "$temporaryFolderPath" -Recurse -Force

                Write-Information "Execution complete."

              pwsh: true
  
  # azure devops create PR
#  - stage: create_template_branch
#    displayName: Create template branch
#    jobs:
#      - job: create_artifacts_pull_request
#        displayName: Create artifacts pull request
#        pool:
#          vmImage: windows-latest
#        steps:
#          - task: DownloadPipelineArtifact@2
#            displayName: Download pipeline artifact
#            inputs:
#              source: current
#              artifactName: artifacts-from-portal
#              targetPath: $(Pipeline.Workspace)/artifacts-from-portal
#          - task: PowerShell@2
#            displayName: Create pull request
#            inputs:
#              targetType: "inline"
#              script: |
#                Set-StrictMode -Version Latest
#                $ErrorActionPreference = "Stop"
#                $VerbosePreference = "Continue"
#                $InformationPreference = "Continue"
#
#                Write-Information "Installing Azure DevOps extension..."
#                az extension add --name "azure-devops"
#                az devops configure --defaults organization="$(System.TeamFoundationCollectionUri)" project="$(System.TeamProject)"
#
#                Write-Information "Creating temporary folder..."
#                $temporaryFolderPath = Join-Path "$(Agent.TempDirectory)" "artifacts-from-portal"
#                New-Item -Path "$temporaryFolderPath" -ItemType "Directory"
#
#                $branchName = "${{ parameters.TARGET_BRANCH_NAME }}"
#                $temporaryBranchName = "artifacts-from-portal-build-$(Build.BuildId)"
#                $repositoryName = "${{ parameters.APIM_REPOSITORY_NAME }}"
#                Write-Information "Cloning branch $branchName in repository $repositoryName..."
#                $cloneUrl = az repos show --repository "$repositoryName" --query "remoteUrl" --output tsv
#                Write-Information "Clone URL is $cloneUrl"
#                git -c http.extraheader="AUTHORIZATION: Bearer $(System.AccessToken)" clone --branch "$branchName" --depth 1 "$cloneUrl" "$temporaryFolderPath"
#                if ($LASTEXITCODE -ne 0) { throw "Cloning branch $branchName in repository $repositoryName failed." }
#
#                Write-Information "Creating temporary branch $temporaryBranchName from $branchName..."
#                git -C "$temporaryFolderPath" checkout -b "$temporaryBranchName" "$branchName"
#                if ($LASTEXITCODE -ne 0) { throw "Creating temporary branch $temporaryBranchName from $branchName failed." }
#
#                Write-Information "Creating artifacts folder..."
#                $artifactFolderPath = Join-Path "$temporaryFolderPath" "${{ parameters.OUTPUT_FOLDER_PATH }}"
#                if ((Test-Path -Path "$artifactFolderPath") -eq $false) {
#                    New-Item -Path "$artifactFolderPath" -ItemType "Directory"
#                }
#
#                Write-Information "Synchronizing artifacts..."
#                $extractorArtifactsFolderPath = Join-Path "$(Pipeline.Workspace)" "artifacts-from-portal" ${{ parameters.OUTPUT_FOLDER_PATH }}
#                if ("$(Agent.OS)" -like "*win*") {
#                   & robocopy "$extractorArtifactsFolderPath" "$artifactFolderPath" /zb /mir /mt
#                    if ($LASTEXITCODE -gt 7) { throw "Setting $artifactFolderPath to contents of $extractorArtifactsFolderPath failed." }
#                }
#                else {
#                    & rsync --verbose --archive --delete --force --recursive "$extractorArtifactsFolderPath/" "$artifactFolderPath/"
#                    if ($LASTEXITCODE -ne 0) { throw "Setting $artifactFolderPath to contents of $extractorArtifactsFolderPath failed." }
#                }
#
#                Write-Information "Validating that changes exist to be published..."
#                $gitStatus = git -C "$temporaryFolderPath" status --porcelain
#                if ($LASTEXITCODE -ne 0) { throw "Getting git status failed." }
#                if ([string]::IsNullOrWhiteSpace($gitStatus)) {
#                    Write-Information "No changes exist to be published."
#                    return
#                }
#               
#                Write-Information "Setting git user information..."
#                git config --global user.email "azuredevopsagent@azuredevops.com"
#                git config --global user.name "Azure Devops agent"
#
#                Write-Information "Adding changes..."
#                git -C "$temporaryFolderPath" add --all
#                if ($LASTEXITCODE -ne 0) { throw "Adding Git changes failed." }
#
#                Write-Information "Committing changes"
#                $commitOutput = git -C "$temporaryFolderPath" commit --message "Initial commit"
#                if ($LASTEXITCODE -ne 0) { 
#                  if ($commitOutput.Contains("nothing to commit, working tree clean")) {
#                    Write-Information "No changes exist to be published."
#                    return
#                  }
#                  throw "Committing Git changes failed." 
#                }
#
#                Write-Information "Pushing changes"
#                git -C "$temporaryFolderPath" -c http.extraheader="AUTHORIZATION: Bearer $(System.AccessToken)" push --set-upstream origin "$temporaryBranchName"
#                if ($LASTEXITCODE -ne 0) { throw "Pushing Git changes failed." }
#
#                Write-Information "Creating pull request..."
#                az repos pr create --source-branch "$temporaryBranchName" --target-branch "$branchName" --title "Merging artifacts from portal (Build $(Build.BuildId))" --squash --delete-source-branch "true" --repository "$repositoryName"
#                if ($LASTEXITCODE -ne 0) { throw "Creating pull request failed." }
#
#                Write-Information "Deleting temporary folder contents..."
#                Remove-Item -Path "$temporaryFolderPath" -Recurse -Force
#
#                Write-Information "Execution complete."
#              pwsh: true
#            env:
#              AZURE_DEVOPS_EXT_PAT: "$(System.AccessToken)"